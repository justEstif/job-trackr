generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Job {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  title         String
  interest      Int
  status        Status         @default(APPLIED)
  description   String
  source        String
  user_id       String
  company_id    String
  company       Company        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user          AuthUser       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@map("job")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  image_url String?
  user_id   String
  user      AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)
  jobs      Job[]

  @@unique([user_id, name], name: "companyIdentifier")
  @@map("company")
}

model Notification {
  id          String   @id @default(cuid())
  name        String
  notify_date DateTime @default(dbgenerated("(now() + '14 days'::interval)"))
  job_id      String
  job         Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@map("notification")
}

model AuthUser {
  id           String        @id @unique
  username     String        @unique
  auth_key     AuthKey[]
  auth_session AuthSession[]
  companies    Company[]
  jobs         Job[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

enum Status {
  APPLIED
  INTERVIEWING
  DENIED
  DECLINED
  ARCHIVED
}
